
Time Complexity: O(N log N)

Auxiliary Space: O(1)

#include<bits/stdc++.h>
using namespace std;


void heapify(int arr[],int n,int i)
{
    int curr=i;  // Initialize current node as root
    int left=2*i;   // Left child index
    int right=2*i+1;   // Right child index

    if(left<n and arr[curr]<arr[left])   // If left child exists and is greater than the current root
    {
        curr=left;   // Update current node to left child
    }

    if(right<n and arr[curr]<arr[right])   // If right child exists and is greater than the current root
    {

        curr=right;   // Update current node to right child
    }


     // If current node is not the root
    if(curr!=i)
    {

        swap(arr[curr],arr[i]);  // Swap current node with root

        heapify(arr,n,curr);    // Recursively heapify the affected subtree
    }
}


void heapsort(int arr[],int n)
{
     // Build max heap using heapify
    
    int start_index=(n/2)-1;  // Find starting index of non-leaf nodes karon er porer gulo sob child hobe as 2*i,2*i+1 are children

    // Build Max-heap (rearrange array)
    for(int i=start_index;i>=0;i--)
    {
        heapify(arr,n,i);
    }

    // One by one extract elements from heap
    for(int i=n-1;i>=1;i--)
    {
        swap(arr[0],arr[i]);  // Move current root to end (swap root with last element)

        heapify(arr,i,0);   // Call heapify on the reduced heap (reduced by one element)
    }



}


int main()
{

    int arr[7]={1,4,3,1,5,7,9};

    int n=sizeof(arr)/sizeof(int);

    heapsort(arr,n);

    for(int i=0;i<n;i++)
    {

        cout<<arr[i]<<" ";
    }

    cout<<endl;


    return 0;
}
