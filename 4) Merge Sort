
Idea: Divide the array into two parts, sort the left part and sort the right part and
merge them

Time Complexity: O(N logN

Space Complexity: O(N) Since we need an arbitrary array as well.


#include <iostream>
#include<bits/stdc++.h>
using namespace std;


void conquer(vector<int>&v,int start,int mid,int end)
{
    vector<int>ans(end-start+1,-1);
    
    int i=start;
    int j=mid+1;
    
    int index=0;
    
    while(i<=mid and j<=end)
    {
        if(v[i]<=v[j])
        {
            ans[index]=v[i];
            index++;
            i++;
        }
        else
        {
            ans[index]=v[j];
            index++;
            j++;
        }
        
    }
    
    
    while(i<=mid)
    {
        ans[index]=v[i];
        index++;
        i++;
    }
    
    while(j<=end)
    {
        ans[index]=v[j];
        index++;
        j++;
    }
    
    
     j=start;
    for(int i=0;i<ans.size();i++)
    {
        v[j]=ans[i];
        j++;
    }
    
    
}

void divide(vector<int>&v,int start,int end)
{
    
    if(start>=end)
    {
        return;
    }
    
    
    int mid=start+(end-start)/2;
    
    divide(v,start,mid);
    divide(v,mid+1,end);
    
    conquer(v,start,mid,end);
    
}

int main() {

     int n; cin>>n;
     
     vector<int>v(n,-1);
     
     for(int i=0;i<n;i++) cin>>v[i];
     
    // merge sort
    
    divide(v,0,n-1);
     
     
     for(auto it:v)
     {
         cout<<it<<" ";
     }
       

    return 0;
}
