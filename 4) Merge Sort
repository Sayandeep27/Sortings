
Idea: Divide the array into two parts, sort the left part and sort the right part and
merge them

Time Complexity: O(N logN )

Space Complexity: O(N) Since we need an arbitrary array as well.


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    
    void merge(int start,int mid,int end,vector<int>&nums)
    {
        vector<int>temp(end-start+1);
        int i=start;
        int j=mid+1;
        int index=0;

        while(i<=mid and j<=end)
        {
            if(nums[i]<=nums[j])
            {
                temp[index]=nums[i];
                i++;
                index++;
            }
            else
            {
                temp[index]=nums[j];
                j++;
                index++;
            }
        }


        while(i<=mid)
        {
            temp[index]=nums[i];
            i++;
            index++;
        }

        while(j<=end)
        {
            temp[index]=nums[j];
            j++;
            index++;
        }

        int k=start;

        for(int i=0;i<temp.size();i++)
        {
            nums[k]=temp[i];
            k++;
        }
    }

    void mergesort(int start,int end,vector<int>&nums)
    {
        // base case
        if(start>=end) return;

        int mid=start+(end-start)/2;

        mergesort(start,mid,nums);
        mergesort(mid+1,end,nums);

        merge(start,mid,end,nums);
    }  


    vector<int> sortArray(vector<int>& nums) {
           
           int n=nums.size();


           mergesort(0,n-1,nums);

           return nums;
    }
};
